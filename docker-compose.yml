services:
  backend:
    build: ./infra-docker-store/backend
    container_name: "laravelContainer"
    volumes:
      - ./backend/src:/var/www
    ports:
    - 8000:8000
    command: php artisan serve --host=0.0.0.0 --port=8000
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend/react-store   # Reactプロジェクトのルート
      dockerfile: ../../infra-docker-store/frontend/Dockerfile
    container_name: "reactContainer"
    tty: true
    stdin_open: true
    volumes:
      - ./frontend/react-store:/app  # ローカルのReactコードをコンテナ内にマウント
      - /app/node_modules # ホストとコンテナ間でnode_modulesを分離
    ports:
      - 3000:3000
    environment:
      - CHOKIDAR_USEPOLLING=true  # ファイル変更を検知する
    networks:
      - app-network

  db: 
    build: ./infra-docker-store/db
    container_name: "mysqlContainer"
    restart: always
    environment:
      MYSQL_DATABASE: store_db          # 初期データベース名
      MYSQL_USER: user                    # アプリケーション用ユーザー
      MYSQL_PASSWORD: user_password       # アプリケーション用ユーザーのパスワード
      MYSQL_ROOT_PASSWORD: root_password  # ルートユーザーのパスワード
    ports:
      - "3306:3306"  # ホストとコンテナのポートマッピング
    volumes:
      - db_data:/var/lib/mysql  # データ永続化のためのボリュームマウント

volumes:
  db_data:
    driver: local

networks:
  app-network:
    driver: bridge

  # nginx:
  #   build: ./infra-docker-store/webserver
  #   container_name: "nginxContainer"
  #   volumes:
  #     - ./backend/src:/var/www
  #     - ./infra-docker-store/webserver/default.conf:/etc/nginx/conf.d/default.conf
  #   ports:
  #     - 80:80
  #   depends_on:
  #     - php
  #   networks:
  #     - app-network
  